### 1. Imports and class names setup ### 
import gradio as gr
import os
import torch

from model import create_effnetb2_model
from timeit import default_timer as timer
from typing import Tuple, Dict

# Setup class names
class_names = ["T√°o (Apple)", "B∆° (Avocado)", "Chu·ªëi (Banana)", "H·ªìng Xi√™m (Sapoche)", "Qu√Ωt (Clementine)", "D·ª´a (Coconut)", "Thanh Long (Dragonfruit)", "S·∫ßu Ri√™ng (Durian)", "Nho (Grape)", "B∆∞·ªüi (Jackfruit)", "Chanh (Lime)", "Nh√£n (Longan)", "V·∫£i (Lychee)", "Cam (Orange)", "ƒêu ƒê·ªß (Papaya)", "D·ª©a (Pineapple)", "L·ª±u (Pomegranate)", "D√¢u (Strawberry)", "D∆∞a H·∫•u (Watermelon)"]

### 2. Model and transforms preparation ###

# Create EffNetB2 model
effnetb2, effnetb2_transforms = create_effnetb2_model(
    num_classes=19, # len(class_names) would also work
)

# Load saved weights
effnetb2.load_state_dict(
    torch.load(
        f="pretrained_effnetb2_feature_extractor_.pth",
        map_location=torch.device("cpu"),  # load to CPU
    )
)

### 3. Predict function ###

# Create predict function
def predict(img) -> Tuple[Dict, float]:
    """Transforms and performs a prediction on img and returns prediction and time taken.
    """
    # Start the timer
    start_time = timer()
    
    # Transform the target image and add a batch dimension
    img = effnetb2_transforms(img).unsqueeze(0)
    
    # Put model into evaluation mode and turn on inference mode
    effnetb2.eval()
    with torch.inference_mode():
        # Pass the transformed image through the model and turn the prediction logits into prediction probabilities
        pred_probs = torch.softmax(effnetb2(img), dim=1)
    
    # Create a prediction label and prediction probability dictionary for each prediction class (this is the required format for Gradio's output parameter)
    pred_labels_and_probs = {class_names[i]: float(pred_probs[0][i]) for i in range(len(class_names))}
    
    # Calculate the prediction time
    pred_time = round(timer() - start_time, 5)
    
    # Return the prediction dictionary and prediction time 
    return pred_labels_and_probs, pred_time

### 4. Gradio app ###

# Create title, description and article strings 
title = "Ph√¢n lo·∫°i tr√°i c√¢y qua h√¨nh ·∫£nh üçìüçâüçåü•ëüçè"
description = "Ph√¢n lo·∫°i tr√°i c√¢y qua h√¨nh ·∫£nh d√πng EfficientNetB0 feature extractor computer vision model. Hi·ªán t·∫°i ƒë√£ ph√¢n lo·∫°i ƒë∆∞·ª£c 19 lo·∫°i tr√°i c√¢y Vi·ªát Nam g·ªìm: T√°o, B∆°, Chu·ªëi, H·ªìng Xi√™m, Qu√Ωt, D·ª´a, Thanh long, S·∫ßu ri√™ng, Nho, B∆∞·ªüi, Chanh, Nh√£n, V·∫£i, Cam, ƒêu ƒê·ªß, D·ª©a, L·ª±u, D√¢u, D∆∞a h·∫•u v·ªõi t·ªâ l·ªá ch√≠nh x√°c h∆°n 91%."
article = "Created by team 9: X·ª≠ l√Ω ·∫£nh v√† ·ª©ng d·ª•ng - CS406.N11.  Public Source Code: https://github.com/19522515/PhanLoaiTraiCay "

# Create examples list from "examples/" directory
example_list = [["examples/" + example] for example in os.listdir("examples")]

# Create the Gradio demo
demo = gr.Interface(fn=predict, # mapping function from input to output
                    inputs=gr.Image(type="pil"), # what are the inputs?
                    outputs=[gr.Label(num_top_classes=19, label="Predictions"), # what are the outputs?
                             gr.Number(label="Prediction time (s)")], # our fn has two outputs, therefore we have two outputs
                    theme='darkhuggingface',
                    # Create examples list from "examples/" directory
                    examples=example_list, 
                    title=title,
                    description=description,
                    article=article)

# Launch the demo!
demo.launch()
